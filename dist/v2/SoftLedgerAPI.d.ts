import { AxiosInstance } from 'axios';
import * as t from '../types';
export declare const DEFAULT_CHUNK_SIZE = 1000;
export declare class SoftLedgerAPI {
	private options;
	private logger;
	private cache;
	private instance;
	token: string;
	constructor(options: t.SoftledgerConnectionOptions);
	private getNewAuth;
	private buildInstance;
	private getToken;
	private setAuth;
	private logResponse;
	private logError;
	private query;
	private getOne;
	private getOneWithCustomType;
	private _getAll;
	private getAll;
	private getAllSubEntity;
	private delete;
	private create;
	private createSubEntity;
	private update;
	private do;
	private doWithData;
	private static formatSearchOptions;
	getInstance(): Promise<AxiosInstance>;
	Audit_find(options?: t.SoftledgerGetRequest<t.AuditLog>): Promise<t.AuditLog[]>;
	Address_get(id: t.NumericId, options?: t.SoftLedgerSDKOptions): Promise<t.Address>;
	Address_find(options?: t.SoftledgerGetRequest<t.Address>): Promise<t.Address[]>;
	Address_delete(id: t.NumericId): Promise<void>;
	Address_create(data: t.CreateAddressRequest): Promise<t.Address>;
	Address_update(id: t.NumericId, data: t.CreateAddressRequest): Promise<t.Address>;
	Customer_get(id: t.NumericId, options?: t.SoftLedgerSDKOptions): Promise<t.Customer>;
	Customer_find(options?: t.SoftledgerGetRequest<t.Customer>): Promise<t.Customer[]>;
	Customer_delete(id: t.NumericId): Promise<void>;
	Customer_create(data: t.CreateCustomerRequest): Promise<t.Customer>;
	Customer_update(id: t.NumericId, data: t.CreateCustomerRequest): Promise<t.Customer>;
	Item_get(id: t.NumericId, options?: t.SoftLedgerSDKOptions): Promise<t.Item>;
	Item_find(options?: t.SoftledgerGetRequest<t.Item>): Promise<t.Item[]>;
	Item_delete(id: t.NumericId): Promise<void>;
	Item_create(data: t.CreateItemRequest): Promise<t.Item>;
	Item_update(id: t.NumericId, data: t.CreateItemRequest): Promise<t.Item>;
	Item_stockSummary(id: t.NumericId): Promise<t.ItemStockSummary[]>;
	Inventory_runCostbasis(): Promise<void>;
	Job_get(id: t.NumericId, options?: t.SoftLedgerSDKOptions): Promise<t.Job>;
	Job_find(options?: t.SoftledgerGetRequest<t.Job>): Promise<t.Job[]>;
	Job_delete(id: t.NumericId): Promise<void>;
	Job_create(data: t.CreateJobRequest): Promise<t.Job>;
	Job_update(id: t.NumericId, data: t.CreateJobRequest): Promise<t.Job>;
	Location_get(id: t.NumericId, options?: t.SoftLedgerSDKOptions): Promise<t.Location>;
	Location_find(options?: t.SoftledgerGetRequest<t.Location>): Promise<t.Location[]>;
	Location_delete(id: t.NumericId): Promise<void>;
	Location_create(data: t.CreateLocationRequest): Promise<t.Location>;
	Location_update(id: t.NumericId, data: t.CreateLocationRequest): Promise<t.Location>;
	PurchaseOrder_get(id: t.NumericId, options?: t.SoftLedgerSDKOptions): Promise<t.PurchaseOrder>;
	PurchaseOrder_getLineItem(id: t.NumericId, options?: t.SoftledgerGetRequest<t.PurchaseOrderLineItem>): Promise<t.PurchaseOrderLineItem[]>;
	PurchaseOrder_find(options?: t.SoftledgerGetRequest<t.PurchaseOrder>): Promise<t.PurchaseOrder[]>;
	PurchaseOrder_delete(id: t.NumericId): Promise<void>;
	PurchaseOrder_create(data: t.CreatePurchaseOrderRequest): Promise<t.PurchaseOrder>;
	PurchaseOrder_update(id: t.NumericId, data: t.UpdatePurchaseOrderRequest): Promise<t.PurchaseOrder>;
	PurchaseOrder_issue(id: t.NumericId): Promise<void>;
	PurchaseOrder_unIssue(id: t.NumericId): Promise<void>;
	PurchaseOrder_email(id: t.NumericId): Promise<void>;
	PurchaseOrderLineItem_get(id: t.NumericId, options?: t.SoftLedgerSDKOptions): Promise<t.PurchaseOrderLineItem>;
	PurchaseOrderLineItem_find(options?: t.SoftledgerGetRequest<t.PurchaseOrderLineItem>): Promise<t.PurchaseOrderLineItem[]>;
	PurchaseOrderLineItem_update(id: t.NumericId, data: t.UpdatePurchaseOrderLineItemRequest): Promise<t.PurchaseOrderLineItem>;
	SalesOrder_get(id: t.NumericId, options?: t.SoftLedgerSDKOptions): Promise<t.SalesOrder>;
	SalesOrder_find(options?: t.SoftledgerGetRequest<t.SalesOrder>): Promise<t.SalesOrderCompact[]>;
	SalesOrder_delete(id: t.NumericId): Promise<void>;
	SalesOrder_create(data: t.CreateSalesOrderRequest): Promise<t.SalesOrder>;
	SalesOrder_update(id: t.NumericId, data: t.UpdateSalesOrderRequest): Promise<t.SalesOrder>;
	SalesOrder_complete(id: t.NumericId): Promise<void>;
	SalesOrder_unComplete(id: t.NumericId): Promise<void>;
	SalesOrder_email(id: t.NumericId): Promise<void>;
	SalesOrder_issue(id: t.NumericId): Promise<void>;
	SalesOrder_reject(id: t.NumericId): Promise<void>;
	SalesOrder_void(id: t.NumericId): Promise<void>;
	SalesOrder_lines(id: t.NumericId, options?: t.SoftledgerGetRequest<t.SalesOrderLineItem>): Promise<t.SalesOrderLineItem[]>;
	SalesOrderLineItem_find(options?: t.SoftledgerGetRequest<t.SalesOrderLineItem>): Promise<t.SalesOrderLineItem[]>;
	SalesOrderLineItem_delete(id: t.NumericId): Promise<void>;
	SalesOrderLineItem_update(id: t.NumericId, data: t.UpdateSalesOrderLineRequest): Promise<t.SalesOrderLineItem>;
	SalesOrderLineItem_create(id: t.NumericId, data: t.CreateSalesOrderLineRequest): Promise<t.SalesOrderLineItem>;
	SalesOrderLineItem_fulfill(id: t.NumericId, data: t.FulFillLineRequest): Promise<void>;
	SalesOrderLineItem_unfulfill(id: t.NumericId, data: t.UnFulFillLineRequest): Promise<void>;
	Status_get(type: t.StatusType, options?: t.SoftLedgerSDKOptions): Promise<t.Status>;
	ShipmentReceipt_get(id: t.NumericId, options?: t.SoftLedgerSDKOptions): Promise<t.ShipmentReceipt>;
	ShipmentReceipt_find(options?: t.SoftledgerGetRequest<t.ShipmentReceipt>): Promise<t.ShipmentReceipt[]>;
	ShipmentReceiptLine_find(options?: t.SoftledgerGetRequest<t.ShipmentReceiptLine>): Promise<t.ShipmentReceiptLine[]>;
	StockAdjustment_get(id: t.NumericId, options?: t.SoftLedgerSDKOptions): Promise<t.StockAdjustment>;
	StockAdjustment_find(options?: t.SoftledgerGetRequest<t.StockAdjustment>): Promise<t.StockAdjustment[]>;
	StockAdjustment_summary(options?: t.SoftledgerGetRequest<t.StockAdjustment>): Promise<t.Stock[]>;
	Transfer_create(options?: t.CreateTransferRequest): Promise<t.Transfer>;
	Template_get(id: t.NumericId, options?: t.SoftLedgerSDKOptions): Promise<t.Template>;
	Template_find(options?: t.SoftledgerGetRequest<t.Template>): Promise<t.Template[]>;
	Vendor_get(id: t.NumericId, options?: t.SoftLedgerSDKOptions): Promise<t.Vendor>;
	Vendor_find(options?: t.SoftledgerGetRequest<t.Vendor>): Promise<t.Vendor[]>;
	Vendor_delete(id: t.NumericId): Promise<void>;
	Vendor_create(data: t.CreateVendorRequest): Promise<t.Vendor>;
	Vendor_update(id: t.NumericId, data: t.UpdateVendorRequest): Promise<t.Vendor>;
	Warehouse_get(id: t.NumericId, options?: t.SoftLedgerSDKOptions): Promise<t.Warehouse>;
	Warehouse_find(options?: t.SoftledgerGetRequest<t.Warehouse>): Promise<t.Warehouse[]>;
	Warehouse_delete(id: t.NumericId): Promise<void>;
	Warehouse_create(data: t.CreateWarehouseRequest): Promise<t.Warehouse>;
	Warehouse_update(id: t.NumericId, data: t.UpdateWarehouseRequest): Promise<t.Warehouse>;
}
